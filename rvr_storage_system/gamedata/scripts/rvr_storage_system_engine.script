function on_game_start()
    RegisterScriptCallback("actor_on_first_update", init)
    RegisterScriptCallback("on_key_press", on_key_press)
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
end

local weight_unit = game.translate_string("st_kg")
local snd_open = sound_object([[interface\inv_open]])
local snd_close = sound_object([[interface\inv_close]])
local snd_item_to_slot = sound_object([[interface\inv_slot]])
local snd_item_to_belt = sound_object([[interface\inv_belt]])
local snd_item_to_ruck = sound_object([[interface\inv_ruck]])
local snd_properties = sound_object([[interface\inv_properties_2]])
local snd_drop_item = sound_object([[interface\inv_drop]])
local snd_attach_addon = sound_object([[interface\inv_attach_addon]])
local snd_detach_addon = sound_object([[interface\inv_detach_addon]])
local snd_item_use = sound_object([[interface\inv_none]])

local test_storage_calls = 0
local mode_bank = "bank"

GUI = nil

function start(mode, obj)
    if (not mode) then
        printdbg("nil mode received")

        return
    end

    if mode ~= mode_bank then
        printdbg("unexpected mode: " .. mode)

        return
    end

    if (not GUI) then
        GUI = UIStorage()
    end

    if (GUI) and (not GUI:IsShown()) then
        if mode == mode_bank then
            -- change_last_mode(1)
            GUI:BankMode_Init()
        end

        GUI:ShowDialog(true)

        _GUIs_keyfree["UIStorage"] = true
        Register_UI("UIStorage", "ui_storage")
    end
end

function init()
    news_manager.send_tip(db.actor, "Reaver Storage System initialized", nil, nil, 30000)
end

-- Function called when a key is pressed
function on_key_press(dik)
    if dik == DIK_keys.DIK_O then
        -- test_storage_calls = test_storage_calls + 1

        printf("test storage calls: " .. test_storage_calls)
        start(mode_bank, nil)
    end
end

function save_state(m_data) -- todo save stashes
    local rvr_storage_system_data = {
        test_storage_calls = test_storage_calls
    }

    m_data.rvr_storage_system_data = rvr_storage_system_data
end

function load_state(m_data) -- todo load stashes
    if not m_data.rvr_storage_system_data then
        return
    end

    if m_data.rvr_storage_system_data.test_storage_calls and type(m_data.rvr_storage_system_data.test_storage_calls) ==
        "number" then
        test_storage_calls = m_data.rvr_storage_system_data.test_storage_calls
    end
end

class "UIStorage" (ui_inventory.UIInventory)

function UIStorage:__init()
    super()
    self:InitControlsExpansion()
    self:InitCallbacksExpansion()
end

function UIStorage:InitControlsExpansion()
    self:SetWndRect(Frect():set(0, 0, 1024, 768))
    self:SetAutoDelete(true)

    local xml

    self.xml_rvr_ss = CScriptXmlInit()
    xml = self.xml_rvr_ss
    xml:ParseFile("ui_rvr_storage.xml")

    -- self.dialog_test_shit = xml:InitStatic("test_shit:frame", self)
    -- self.text_counter = xml:InitTextWnd("test_shit:text_counter", self.dialog_test_shit)
    -- self.text_counter:SetText("idi nahui, eblan: " .. test_storage_calls)

    -- self.btn_inc = xml:Init3tButton("test_shit:btn_inc", self.dialog_test_shit)
    -- self:Register(self.btn_inc, "button_inc")

    -- self.btn_dec = xml:Init3tButton("test_shit:btn_dec", self.dialog_test_shit)
    -- self:Register(self.btn_dec, "button_dec")
end

-- Bank mode
function UIStorage:BankMode_Init()
    self:Print(nil, "BankMode_Init")

    self.mode = mode_bank

    -- Show/Hide needed elements
    self:Reset()

    -- Update inventories
    -- self:IMode_ResetInventories()

    -- Update info
    -- self:UpdateInfo(true)

    -- Sound effect
    self:PlaySND(snd_open)
end

function UIStorage:Close()
    self:Print(nil, "Close")

    -- Sound effect
    self:PlaySND(snd_close)

    self:HideDialog()
    self:Show(false)

    -- change_last_mode(0)

    Unregister_UI("UIStorage")
end

function UIStorage:InitCallbacksExpansion()
    -- self:AddCallback("button_inc", ui_events.BUTTON_CLICKED, self.Inc, self)
    -- self:AddCallback("button_dec", ui_events.BUTTON_CLICKED, self.Dec, self)
end

function UIStorage:Inc()
    test_storage_calls = test_storage_calls + 1
    self.text_counter:SetText("idi nahui, eblan: " .. test_storage_calls)
    -- self.update_info = true
end

function UIStorage:Dec()
    test_storage_calls = test_storage_calls - 1
    self.text_counter:SetText("idi nahui, eblan: " .. test_storage_calls)
    -- self.update_info = true
end

function UIStorage:Reset(obj)
    local to_show         = obj and self:IsInvOwner(obj)
    local mode            = self.mode
    local mBank           = mode == mode_bank

    -- Info
    self.npc_id           = obj and obj:id() or false
    self.npc_is_box       = obj and IsInvbox(obj) or false

    -- Containers
    self.CC["actor_bag"]:Show(mBank)
    self.CC["actor_trade"]:Show(false)
    self.CC["actor_trade_bag"]:Show(false)
    self.CC["npc_bag"]:Show(mBank)
    self.CC["npc_trade"]:Show(false)
    self.CC["npc_trade_bag"]:Show(false)
    self:Picker_Toggle()
    self.trash:Show(false)

    -- self.CC["actor_bag"].can_select = false -- mR
    -- self.CC["actor_equ"].can_select = false
    -- self.CC["picker"].can_select    = false

    -- for name, cc in pairs(self.CC) do
    --     cc.trade_profile = nil
    -- end

    -- Elements
    self.npc_dialog:Show(mBank)
    self.npc_up_dialog:Show(false)
    self.player_trade:Show(false)
    self.player_putall:Show(mBank)
    self.npc_takeall:Show(false)
    self.npc_trade:Show(false)
    self.npc_money:Show(false)
    self.npc_weight_max:Show(false)

    self.npc_name:Show(to_show)
    self.npc_community:Show(to_show)
    self.npc_icon:Show(to_show)
    self.npc_up_repair:Enable(false)

    self.item_info:Update()
    self.upgr_info:Update()
    self:SetHint(false)
    if self.item_props:IsShown() then
        self.item_props:OnHide()
    end

    -- Reset sorting
    self.sort_btn[1]:SetCheck(true)
    self:On_Sort(1, true)

    self.upgr          = { id = false, sec = false, idx = false, bag = false }
    self.hover         = { idx = false, bag = false, tg = 0 }
    self.slot_hl       = { idx = false, bag = false }
    self.holding_ctrl  = false
    self.holding_shift = false

    -- Allow player movement for this UI
    self:AllowMovement(false)
end
