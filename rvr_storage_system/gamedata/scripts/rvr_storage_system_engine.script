function on_game_start()
    RegisterScriptCallback("actor_on_first_update", init)
    RegisterScriptCallback("on_key_press", on_key_press)
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
end

local weight_unit = game.translate_string("st_kg")
local snd_open = sound_object([[interface\inv_open]])
local snd_close = sound_object([[interface\inv_close]])
local snd_item_to_slot = sound_object([[interface\inv_slot]])
local snd_item_to_belt = sound_object([[interface\inv_belt]])
local snd_item_to_ruck = sound_object([[interface\inv_ruck]])
local snd_properties = sound_object([[interface\inv_properties_2]])
local snd_drop_item = sound_object([[interface\inv_drop]])
local snd_attach_addon = sound_object([[interface\inv_attach_addon]])
local snd_detach_addon = sound_object([[interface\inv_detach_addon]])
local snd_item_use = sound_object([[interface\inv_none]])

local test_storage_calls = 0

local mode_bank = "bank"
local mode_test_bank = "test_bank"
local mode_generic_container = "generic_container"
local mode_ammo_container = "ammo_container"
local mode_med_container = "med_container"
local mode_mats_container = "mats_container"
-- possible variants: artifacts, w/a parts (has durability, seems bad)

GUI = nil

function start(mode, storage)
    if (not mode) then
        printdbg("nil mode received")

        return
    end

    if (not GUI) then
        GUI = UIStorage()
    end

    if (GUI) and (not GUI:IsShown()) then
        if mode == mode_bank then
            -- change_last_mode(1)
            GUI:BankMode_Init(storage)
        elseif mode == mode_test_bank then
            GUI:TestBankMode_Init(storage)
        elseif mode == mode_generic_container then
            GUI:GenericCMode_Init(storage)
        elseif mode == mode_ammo_container then
            GUI:AmmoCMode_Init(storage)
        elseif mode == mode_med_container then
            GUI:MedCMode_Init(storage)
        elseif mode == mode_mats_container then
            GUI:MatsCMode_Init(storage)
        else
            print("unexpected mode")

            return
        end

        GUI:ShowDialog(true)

        _GUIs_keyfree["UIStorage"] = true
        Register_UI("UIStorage", "ui_storage")
    end
end

function init()
    news_manager.send_tip(db.actor, "Reaver Storage System initialized", nil, nil, 30000)
end

-- Function called when a key is pressed
function on_key_press(dik)
    if dik == DIK_keys.DIK_O then
        -- test_storage_calls = test_storage_calls + 1

        printf("test storage calls: " .. test_storage_calls)
        start(mode_test_bank,   nil) -- todo add test object
    end
end

function save_state(m_data) -- todo save stashes
    local rvr_storage_system_data = {
        test_storage_calls = test_storage_calls
    }

    m_data.rvr_storage_system_data = rvr_storage_system_data
end

function load_state(m_data) -- todo load stashes
    if not m_data.rvr_storage_system_data then
        return
    end

    if m_data.rvr_storage_system_data.test_storage_calls and type(m_data.rvr_storage_system_data.test_storage_calls) ==
        "number" then
        test_storage_calls = m_data.rvr_storage_system_data.test_storage_calls
    end
end

class "UIStorage" (CUIScriptWnd)

function UIStorage:__init()
    super()
    self.mode = mode_test_bank
    self:InitControls()
end

function UIStorage:__finalize()
end

function UIStorage:InitControls()
    self:SetWndRect(Frect():set(0, 0, 1024, 768))
    -- self:SetAutoDelete(true)

    self.xml = CScriptXmlInit()
    local xml = self.xml
    xml:ParseFile("ui_rvr_storage.xml")

    self.actor_d       = xml:InitStatic("stg_actor_inventory", self)
    self.actor_d_frame = xml:InitFrame("stg_actor_inventory:frame_base", self.actor_d)
    self.actor_d_list  = xml:InitFrame("stg_actor_inventory:frame_list", self.actor_d)
    self.actor_d_cap   = xml:InitStatic("stg_actor_inventory:cap", self.actor_d)
    self.actor_inv       = xml:InitListBox("stg_actor_inventory:list", self.actor_d_list)

    self.storage_d     = xml:InitStatic("stg_storage_inventory", self)
    self.storage_d_frame = xml:InitFrame("stg_storage_inventory:frame_base", self.storage_d)
    self.storage_d_list  = xml:InitFrame("stg_storage_inventory:frame_list", self.storage_d)
    self.storage_d_cap   = xml:InitStatic("stg_storage_inventory:cap", self.storage_d)
    self.storage_inv     = xml:InitListBox("stg_storage_inventory:list", self.storage_d_list)


    -- self.dialog_test_shit = xml:InitStatic("test_shit:frame", self)
    -- self.text_counter = xml:InitTextWnd("test_shit:text_counter", self.dialog_test_shit)
    -- self.text_counter:SetText("idi nahui, eblan: " .. test_storage_calls)

    -- self.btn_inc = xml:Init3tButton("test_shit:btn_inc", self.dialog_test_shit)
    -- self:Register(self.btn_inc, "button_inc")

    -- self.btn_dec = xml:Init3tButton("test_shit:btn_dec", self.dialog_test_shit)
    -- self:Register(self.btn_dec, "button_dec")
end

-- Test bank mode
function UIStorage:TestBankMode_Init(storage)
    self:Log("TestBankMode_Init")
    self.mode = mode_test_bank
    -- self:PlaySND(snd_open)
end

function UIStorage:Close()
    self:Log("Close")

    -- Sound effect
    -- self:PlaySND(snd_close)

    self:HideDialog()
    self:Show(false)

    -- change_last_mode(0)

    Unregister_UI("UIStorage")
end

function UIStorage:Reset(storage)
    self:Log("Reset")
end

function UIStorage:Log(msg)
    print("mode=" .. (self.mode or "undefined"))
    print(msg)
end
